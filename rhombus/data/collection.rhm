#lang rhombus


export:
  Collection
  ImmutableCollection
  MutableCollection


import:
  rhombus/data/sequence.Sequence


interface Collection:
  extends Sequence
  // read-only property
  property size :: Integer

  method isEmpty() :: Boolean: size() == 0

  method contains(element) :: Boolean:
    let iterator = iterate()
    fun loop():
      iterator.hasNext() && (iterator.next() == element || loop())
    loop()


interface ImmutableCollection:
  extends Collection
  method add(element) :: ImmutableCollection
  method remove(element) :: ImmutableCollection


interface MutableCollection:
  extends Collection
  method add(element) :: Void

  method addAll(elements :: Sequence) :: Void:
    let iterator = elements.iterate()
    fun loop():
      when iterator.hasNext()
      | add(iterator.next())
        loop()
    loop()

  method remove(element) :: Void
  method clear() :: Void
